{"generator":"Code Snippets v2.14.0","date_created":"2020-11-27 22:43","snippets":[{"name":"Add \"Passes\" section","scope":"global","code":"\/\/ ------------------\n\/\/ 1. Register new endpoint to use for My Account page\n\/\/ Note: Resave Permalinks or it will give 404 error\n\nfunction bbloomer_add_passes_endpoint() {\n\tadd_rewrite_endpoint( 'passes', EP_ROOT | EP_PAGES );\n}\n\nadd_action( 'init', 'bbloomer_add_passes_endpoint' );\n\n\/\/ 2. Add new query var\nfunction bbloomer_passes_query_vars( $vars ) {\n\t$vars[] = 'passes';\n\treturn $vars;\n}\n\nadd_filter( 'query_vars', 'bbloomer_passes_query_vars', 0 );\n\n\/\/ 3. Insert the new endpoint into the My Account menu\nfunction bbloomer_add_passes_support_link_my_account( $items ) {\n\t$items['passes'] = 'Passes';\n\treturn $items;\n}\n\nadd_filter( 'woocommerce_account_menu_items', 'bbloomer_add_passes_support_link_my_account' );\n","priority":"10"},{"name":"Display available passes","scope":"global","code":"function bbloomer_test_content() {\n\tglobal $wpdb;\n\n\tif ( is_user_logged_in() ) :\n\/\/For Daniel (pay attantion to steps only)\n\t\t$user_id = get_current_user_id(); \/\/ 1 Get the Current user Id\n\n\t\t$customer = new WC_Customer( $user_id ); \/\/2 Get the customer info using the id\n\t\n\t\t\/* Original\n\t\t$custom_value = $wpdb->get_results(\"SELECT * FROM $wpdb->usermeta WHERE meta_key LIKE 'Pro%' AND user_id = $user_id ORDER by umeta_id \");\n\t\t$metKey = array();\n\t\t$metValue = array();\n\t\tforeach ( $custom_value as $v ) {\n\n\t\t\t\n\t\t\tarray_push($metKey, $v->meta_key );\n\t\t\tarray_push($metValue, $v->meta_value);\n\t\t\t\n\n\t\t}\n\t\t*\/\n\t\n\t\t\/\/ Daniel starts\n\t\t$promos = ['Archery' => 0, 'Airsoft' => 0, 'Combo' => 0];\n\t\tif (is_vip(VIP_ANNUAL_ID, VIP_SEMIANNUAL_ID)) {\n\t\t\t$promos['VIP'] = 0;\n\t\t}\n\t\t$passes = $wpdb->get_results(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT meta_key, meta_value\n\t\t\t\t FROM {$wpdb->prefix}usermeta\n\t\t\t\t WHERE (meta_key LIKE %s OR meta_key = %s) AND user_id = %d\n\t\t\t\t ORDER by umeta_id\",\n\t\t\t\t['Pro%', 'VIP', $user_id]\n\t\t\t)\n\t\t);\n\t\tforeach(array_keys($promos) as $promo_type) {\n\t\t\tforeach($passes as $pass) {\n\t\t\t\tif (strpos($pass->meta_key, $promo_type) !== false) {\n\t\t\t\t\t$promos[$promo_type] = $pass->meta_value;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\/\/ Daniel ends\n\t\n\tendif;\n\t\n\t\t\n\t$order = $customer->get_last_order(); \/\/3 Get the recent order\n\n\t\tif (!empty($order)) {\n\t\t\t\n\t\t\t$booking_data = new WC_Booking_Data_Store(); \/\/4 create a booking object\n\t\t\t$booking_ids = $booking_data->get_booking_ids_from_order_id( $order->get_id() ); \/\/5 get all the booking ids from the recent order\n\t\t\t$i = count($booking_ids);\/\/ 6 save the number of ids\n\t\t\t\n\t\t\tforeach ( $order->get_items() as $item_id => $item ) { \/\/7 loop through the recent order items\n\t\t\t\t\n\t\t\t\/\/echo $item;\n\t\t\t\t\n\t\t\t\t$product_id = $item->get_product_id(); \/\/8 get the seprate item id in the order\n\n\t\t\t\tif($product_id == 68051) {\n\n\t\t\t\t\tif($i!==0) {\n\n\t\t\t\t\t\t$booking = new WC_Booking( $booking_ids[$i-1] ); \/\/8 get each booking for each item using the booking ids\n\t\t\t\t\t\t\/\/echo '<pre>'; print_r($booking); echo '<\/pre>'; \/\/ print an array of each booking info\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\n\t\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ HTML temp solution (Daniel: change '$metValue' to $values)\n\t?>\n\t<h3 style=\"color:#1D1E23\">Your Passes<\/h3>\n\n\t<table class=\"shop_table my_account_bookings passesTable\" id=\"passesTable\">\n\t<thead>\n\t\t<tr>\n\t\t\t<th scope=\"col\" class=\"booking-id\">Pass Name<\/th>\n\t\t\t<th scope=\"col\" class=\"booked-product\">Quantity<\/th>\n\t\t\t<th scope=\"col\" class=\"booked-product\">Need more?<\/th>\n\t\t\t<th scope=\"col\" class=\"booked-product\">Get Promotion<\/th>\n\t\t<\/tr>\n\t<\/thead>\n\t<tbody>\n\t\t\n\t<?php\n\tforeach($promos as $promo_type => $promo_count) {\n\t\t?>\n\t\t\t<tr>\n\t\t\t\t<td class=\"tableHead\"><?=$promo_type?><\/td>\n\t\t\t\t<td class=\"booked-product\"><?=$promo_count?><\/td>\n\t\t\t\n\t\t\t\t<?php if(strcmp($promo_type, 'VIP') == 0) {\n\t\t\t\t\t\techo '<td class=\"booked-product greenText\"><\/td>';\n\t\t\t\t\t\techo '<td class=\"booked-product greenText\"><\/td>';\n\t\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif(strcmp($promo_type, 'Archery') == 0) {\n\t\t\t\t\t\t\t?>\n\t\t\t \t\t\t\t<td class=\"booked-product\">\n\t\t\t\t\t\t\t\t\t<div class=\"purchasePass\"> \n\t\t\t\t\t\t\t\t\t\t<input class=\"singlePassInput\"\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\t\t\t\tid=\"quantityArchery\"\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"quantityArchery\"\n\t\t\t\t\t\t\t\t\t\t\t\tmin=\"1\" max=\"9\"\n\t\t\t\t\t\t\t\t\t\t\t\tvalue=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\toninput=\"javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);\"\n\t\t\t\t\t\t\t\t\t\t\t\tmaxlength = \"1\">\n\t\t\t\t\t\t\t\t\t\t<a id=\"addArchery\" class=\"button addToCart\" href=\"https:\/\/solelyana.com\/?add-to-cart=70057\" >Buy<\/a>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t<\/td>\n\t\t\t\t\t\t\n\t\t\t\t\t<?php }\n\t\t\t\t if(strcmp($promo_type, 'Airsoft') == 0) { ?>\n\t\t\t\t\t\t\t<td class=\"booked-product\">\n\t\t\t\t\t\t\t\t\t<div class=\"purchasePass\"> \n\t\t\t\t\t\t\t\t\t\t<input class=\"singlePassInput\"\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\t\t\t\tid=\"quantityAirsoft\"\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"quantityAirsoft\"\n\t\t\t\t\t\t\t\t\t\t\t\tmin=\"1\" max=\"9\" value=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\toninput=\"javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);\"\n\t\t\t\t\t\t\t\t\t\t\t\tmaxlength = \"1\">\n\t\t\t\t\t\t\t\t\t\t<a id=\"addAirsoft\" class=\"button addToCart\" href=\"https:\/\/solelyana.com\/?add-to-cart=70055\" >Buy<\/a>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t<\/td>\n\n\t\t\t\t\t<?php }\n\t\t\t\t\t\tif(strcmp($promo_type, 'Combo') == 0) { ?>\n\t\t\t\t\t\t\t<td class=\"booked-product\">\n\t\t\t\t\t\t\t\t\t<div class=\"purchasePass\"> \n\t\t\t\t\t\t\t\t\t\t<input class=\"singlePassInput\"\n\t\t\t\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\t\t\t\tid=\"quantityCombo\"\n\t\t\t\t\t\t\t\t\t\t\t\tname=\"quantityCombo\"\n\t\t\t\t\t\t\t\t\t\t\t\tmin=\"1\" max=\"9\" value=\"1\"\n\t\t\t\t\t\t\t\t\t\t\t\toninput=\"javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);\"\n\t\t\t\t\t\t\t\t\t\t\t\tmaxlength = \"1\">\n\t\t\t\t\t\t\t\t\t\t<a id=\"addCombo\" class=\"button addToCart\" href=\"https:\/\/solelyana.com\/?add-to-cart=70056\" >Buy<\/a>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t\t<\/td>\n\t\t\t\t\t\t<?php\t} ?>\n\t\t\t\t\t\t\t<td class=\"booked-product greenText\">\n\t\t\t\t\t\t\t\t\t<div class=\"promoPage\">\n\t\t\t\t\t\t\t\t\t\t<a class=\"promoButtonLink\" href=\"\/product\/promo-passes-101\/\"><button class=\"button promoButton\"><\/button><\/a>\n\t\t\t\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t\t<\/td>\n\t\t\t\t\t<?php } ?>\n\t\t\t<\/tr>\n\t\t<?php } ?>\n\t\n\t\n\t<\/tbody>\n\t<\/table>\n\n\n<?php }\n\n\nadd_filter( 'woocommerce_add_to_cart_redirect', 'wp_get_referer' );\n\nadd_action( 'woocommerce_account_passes_endpoint', 'bbloomer_test_content' );\n\n\n","priority":"10"},{"name":"Add passes to database","scope":"global","code":"add_action( 'woocommerce_checkout_order_processed', 'passes_ordered',  1, 1  );\n\nfunction passes_ordered () {\n\n\tif ( is_user_logged_in() ) :\n\n\t\t$user_id = get_current_user_id();\n\t\t$customer = new WC_Customer( $user_id );\n\n    \/\/ Get the last WC_Order Object instance from current customer\n\t\t$last_order = $customer->get_last_order();\n\n\t\tif (!empty($last_order)) {\n\t\t\t\n\t\t\tforeach ( $last_order->get_items() as $item_id => $item ) {\n\t\t\t\t\n\t\t\t\t$variation = $item->get_variation_id();\n\t\t\t\t\n\t\t\t\tif($variation == 68068 || $variation == 68069 || $variation == 68070) {\n\n\t\t\t\t$name = $item->get_name();\n\t\t\t\t$quantity = $item->get_quantity();\n\n\t\t\t\tcheckData($name, $quantity, $user_id);\n\t\t\t\t\n\t\t\t\t\/\/ Daniel starts\n\t\t\t\t\/\/insert_or_update_passes($name, $quantity, $user_id);\n\t\t\t\t\/\/ Daniel ends\n\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\tendif;\t\n}\n\n\/*\n\/\/ Daniel starts (not working properly for InnoDB)\nfunction insert_or_update_passes($type, $qty, $user)\n{\n\tglobal $wpdb;\n\t\n\t$wpdb->query(\n\t\t$wpdb->prepare(\"\n\t\t\tINSERT INTO {$wpdb->prefix}usermeta (user_id, meta_key, meta_value) VALUES (%d, %s, %d)\n  \t\t\tON DUPLICATE KEY UPDATE meta_value = meta_value + %d\n\t\t\",\n\t\t[$user, $type, 11 * $qty, 11 * $qty])\n\t);\n}\n\/\/ Daniel ends\n*\/\n\nfunction checkData ($na, $quant, $id) {\n\tglobal $wpdb;\n\t\n\t\/\/Check if the customer already has the fields created. If not, create them. Next time when purchase is made update the values.\n\n\t$count= $wpdb->get_var(\n\t\t$wpdb->prepare(\n\t\t\t\"\n\t\t\tSELECT COUNT(*)\n\t\t\tFROM  $wpdb->usermeta\n\t\t\tWHERE meta_key = %s AND user_id=%d\n\t\t\t\",\n\t\t\t$na,\n\t\t\t$id\n\t\t)\n\t\t\n\t);\n\n\tif ($count == 0) {\n\n\t\t$sql = $wpdb->prepare( \"INSERT INTO $wpdb->usermeta (user_id, meta_key, meta_value ) VALUES ( %s, %s, %d )\", $id, $na, 11 * $quant );\n\t\t$res = $wpdb->query($sql);\n\t\t$res or $wpdb->print_error('Failed to insert data into the database!');\n\t}\n\n\telse if($count == 1)\n\t{\n\/* Original\n\t\t$temp = $wpdb->get_var(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"\n\t\t\t\tSELECT meta_value\n\t\t\t\tFROM $wpdb->usermeta\n\t\t\t\tWHERE meta_key = %s AND user_id = %d\n\t\t\t\t\",\n\t\t\t\t$na,\n\t\t\t\t$id)); \n\n\t\t$temp = $temp + (11*$quant);\n\n\t\t$wpdb->query( $wpdb->prepare(\"\n\t\t\tUPDATE $wpdb->usermeta\n\t\t\tSET meta_value = $temp\n\t\t\tWHERE meta_key = %s AND user_id = %d\n\t\t\t\",\n\t\t\t$na,\n\t\t\t$id));*\/\n\t\t$res = $wpdb->query( $wpdb->prepare(\"\n\t\t\tUPDATE $wpdb->usermeta\n\t\t\tSET meta_value = meta_value + %d\n\t\t\tWHERE meta_key = %s AND user_id = %d\n\t\t\t\",\n\t\t\t[11 * $quant, $na, $id]));\n\t\t$res or $wpdb->print_error('Failed to update data into the database!');\n\t}\t\t\t\n}","priority":"10"},{"name":"Deduct passes from database","scope":"global","code":"add_action( 'woocommerce_checkout_order_processed', 'change_passes',  1, 1  );\nfunction change_passes() {\n\t\n\tif (!is_user_logged_in()) return;\n\t\n\t$user_id = get_current_user_id();\n\t$customer = new WC_Customer( $user_id );\n\t$order = $customer->get_last_order();\n\t\n\tif (empty($order)) return;\n\t\n\t$booking_data = new WC_Booking_Data_Store();\n\t$booking_ids = $booking_data->get_booking_ids_from_order_id( $order->get_id() );\n\t$i = count($booking_ids);\n\t\n\tif (!$i) return;\n\t\t\n\tforeach ( $order->get_items() as $item ) {\n\t\t\t\t\n\t\t$product_id = $item->get_product_id();\n\t\t\n\t\tif ($product_id != SINGULAR_ID) continue;\n\t\t\t\t\t\t\t\n\t\tif ($i) {\n\t\t\t$discount_info = $item->get_meta('discount');\t\n\t\t\t$booking = new WC_Booking( $booking_ids[$i-1] );\n\t\t\t\/\/$resourceId = $booking->get_resource()->get_id();\n\t\t\t\/\/$person_counts = $booking->get_person_counts();\n\t\t\t$resource = key($booking->get_person_counts());\n\t\t\t\n\t\t\tforeach ($discount_info as $discount) {\n\t\t\t\tif (strpos($discount['type'], 'Use Promo') !== false) {\n\t\t\t\t\tchange_databaseData($discount['qty'], $resource, $user_id, false);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (strpos($discount['type'], 'Use VIP') !== false) {\n\t\t\t\t\tchange_databaseData($discount['qty'], $resource, $user_id, true);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$i--;\n\t}\n}\n\n\/\/ Daniel ends\n\nfunction change_databaseData($qty, $recId, $userId, $vip) {\n\tglobal $wpdb;\n\t\n\t\/\/ Daniel starts\n\t$type = '';\n\tif ($vip) {\n\t\t$type = 'VIP';\n\t} else {\n\t\tswitch (+$recId) {\n\t\t\tcase ARCHERY_ID:\n\t\t\t\t$type = 'Promo Passes 10+1 - Archery';\n\t\t\t\tbreak;\n\t\t\tcase AIRSOFT_ID:\n\t\t\t\t$type = 'Promo Passes 10+1 - Airsoft';\n\t\t\t\tbreak;\n\t\t\tcase COMBO_ID:\n\t\t\t\t$type = 'Promo Passes 10+1 - Combo';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\techo 'Wrong resource id';\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t$res = $wpdb->query($wpdb->prepare(\"\n\t\tUPDATE {$wpdb->prefix}usermeta\n\t\tSET meta_value = meta_value - %d\n\t\tWHERE meta_value >= %d AND meta_key = %s AND user_id = %d\n\t\t\",\n\t\t[$qty, $qty, $type, $userId]\n\t));\n\t\n\t$res or $wpdb->print_error('Failed to update data into the database!');\n\t\/\/ Daniel ends\n}","priority":"10"},{"name":"Show live timer","scope":"global","code":"\/\/add_action( 'woocommerce_account_timer_endpoint', 'bbloomer_timer_content' );\n\n\nadd_action( 'woocommerce_account_members-area_endpoint', 'bbloomer_timer_content' );\n\nfunction bbloomer_timer_content()\n{\n\tconsole.log(\"hello\");\n\t\n\tglobal $wpdb;\n\t\n\tif ( is_user_logged_in() ) :\n\n\t\t $user_id = get_current_user_id(); \/\/ 1 Get the Current user Id\n\t\n\t \t$memberships = wc_memberships_get_user_memberships($user_id);\n\t\n\t\tif ( $memberships ) {\n\t\t\n\t\t$time =  $memberships[0]->get_end_date( 'Y-m-d H:i:s' );\n\t\t}\n\t\n\t\n\t\techo '<h3 style=\"color:#1D1E23\">Memebership expires in<\/h3>';\n\t\techo '<div class=\"timerMain\">';\n\t\techo '<p id=\"timer\"><\/p>';\n\t\techo '<\/div>'; \n\t\n\t\n\t\techo '<br>';\n\t\techo '<br>';\n\t\techo '<h3 style=\"color:#1D1E23\">Membership details<\/h3>';\n\t\tendif;\n\t\n\t\n\t?>\n\t<script>\t\t\n\t\tvar data = <? echo json_encode($time, JSON_HEX_TAG); ?>;\n\t\t timer(data); \n\t\t\n\t<\/script>\n<?\n\t\t\t\t\n}\n\n\n\n\n\n","priority":"10"},{"name":"Add Activity Single Pass","scope":"global","code":"add_action( 'woocommerce_checkout_order_processed', 'pass_ordered',  1, 1  );\n\nfunction pass_ordered () {\n\n\tif ( is_user_logged_in() ) :\n\n\t\t$user_id = get_current_user_id();\n\t\t$customer = new WC_Customer( $user_id );\n\n    \/\/ Get the last WC_Order Object instance from current customer\n\t\t$last_order = $customer->get_last_order();\n\n\t\tif (!empty($last_order)) {\n\t\t\t\n\t\t\tforeach ( $last_order->get_items() as $item_id => $item ) {\n\t\t\t\t\n\t\t\t\t$variation = $item->get_variation_id();\n\t\t\t\t\n\t\t\t\tif($variation == 70057 || $variation == 70056 || $variation == 70055) {\n\n\t\t\t\t$name = $item->get_name();\n\t\t\t\t\t\n\t\t\t\t\tif($name === \"Activity Pass - Airsoft\") {\n\t\t\t\t\t\t$name = \"Promo Passes 10+1 - Airsoft\";\n\t\t\t\t\t}\n\t\t\t\t\tif($name === \"Activity Pass - Archery\") {\n\t\t\t\t\t\t$name = \"Promo Passes 10+1 - Archery\";\n\t\t\t\t\t}\n\t\t\t\t\tif($name === \"Activity Pass - Combo\") {\n\t\t\t\t\t\t$name = \"Promo Passes 10+1 - Combo\";\n\t\t\t\t\t}\n\t\t\t\t$quantity = $item->get_quantity();\n\n\t\t\t\tcheckDataForSinglePass($name, $quantity, $user_id);\n\t\t\t\t\tconsole.log(\"hey\");\n\t\t\t\t\n\t\t\t\t\/\/ Daniel starts\n\t\t\t\t\/\/insert_or_update_passes($name, $quantity, $user_id);\n\t\t\t\t\/\/ Daniel ends\n\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\tendif;\t\n}\n\n\/*\n\/\/ Daniel starts (not working properly for InnoDB)\nfunction insert_or_update_passes($type, $qty, $user)\n{\n\tglobal $wpdb;\n\t\n\t$wpdb->query(\n\t\t$wpdb->prepare(\"\n\t\t\tINSERT INTO {$wpdb->prefix}usermeta (user_id, meta_key, meta_value) VALUES (%d, %s, %d)\n  \t\t\tON DUPLICATE KEY UPDATE meta_value = meta_value + %d\n\t\t\",\n\t\t[$user, $type, 11 * $qty, 11 * $qty])\n\t);\n}\n\/\/ Daniel ends\n*\/\n\nfunction checkDataForSinglePass ($na, $quant, $id) {\n\tglobal $wpdb;\n\t\n\t\t\t\t\t\tconsole.log(\"inside\");\n\t\n\t\/\/Check if the customer already has the fields created. If not, create them. Next time when purchase is made update the values.\n\n\t$count= $wpdb->get_var(\n\t\t$wpdb->prepare(\n\t\t\t\"\n\t\t\tSELECT COUNT(*)\n\t\t\tFROM  $wpdb->usermeta\n\t\t\tWHERE meta_key = %s AND user_id=%d\n\t\t\t\",\n\t\t\t$na,\n\t\t\t$id\n\t\t)\n\t\t\n\t);\n\n\tif ($count == 0) {\n\n\t\t$sql = $wpdb->prepare( \"INSERT INTO $wpdb->usermeta (user_id, meta_key, meta_value ) VALUES ( %s, %s, %d )\", $id, $na, $quant );\n\t\t$res = $wpdb->query($sql);\n\t\t$res or $wpdb->print_error('Failed to insert data into the database!');\n\t}\n\n\telse if($count == 1)\n\t{\n\/* Original\n\t\t$temp = $wpdb->get_var(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"\n\t\t\t\tSELECT meta_value\n\t\t\t\tFROM $wpdb->usermeta\n\t\t\t\tWHERE meta_key = %s AND user_id = %d\n\t\t\t\t\",\n\t\t\t\t$na,\n\t\t\t\t$id)); \n\n\t\t$temp = $temp + (11*$quant);\n\n\t\t$wpdb->query( $wpdb->prepare(\"\n\t\t\tUPDATE $wpdb->usermeta\n\t\t\tSET meta_value = $temp\n\t\t\tWHERE meta_key = %s AND user_id = %d\n\t\t\t\",\n\t\t\t$na,\n\t\t\t$id));*\/\n\t\t$res = $wpdb->query( $wpdb->prepare(\"\n\t\t\tUPDATE $wpdb->usermeta\n\t\t\tSET meta_value = meta_value + %d\n\t\t\tWHERE meta_key = %s AND user_id = %d\n\t\t\t\",\n\t\t\t[$quant, $na, $id]));\n\t\t$res or $wpdb->print_error('Failed to update data into the database!');\n\t}\t\t\t\n}","priority":"10"},{"name":"Black Friday Event 2020","scope":"front-end","code":"add_filter( 'woocommerce_coupon_is_valid', 'check_if_coupon_is_valid', 10, 2 );\nfunction check_if_coupon_is_valid( $is_valid, $coupon) {\n\t\n\t\/\/ Settings for blackfridayarchery only\n\t$is_bfa = $coupon->get_code() === 'bfarchery';\n\tif (!$is_bfa) {\n\t\treturn $is_valid;\n\t}\n\t\n\t$is_valid = false;\n\t\n\t$discounted_subtotal = 0;\n\t$coupon_amount = $coupon->get_amount();\n\t\/\/$archery_qty = 0;\n   foreach ( WC()->cart->get_cart() as $cart_item ) {\n\t   if ($cart_item['product_id'] == SINGULAR_ID) {\n\t\t\t$booking = $cart_item['booking'];\n\t\t\t$is_archery = key($booking['_persons']) == ARCHERY_ID;\n\n\t\t\t\/\/ Coupon valid if booking archery for 2020 black friday weekend, and only apply discount to the archery part\n\t\t\tif ($is_archery && is_bf_weekend($booking['_start_date'])) {\n\t\t\t\t\/\/$discounted_subtotal += min($cart_item['line_subtotal'], $coupon_amount);\n\t\t\t\t\/\/$is_valid = true;\n\t\t\t\t\n\t\t\t\t\/\/ Newnew\n\t\t\t\t$is_valid = true;\n\t\t\t\t$original_amount = min($cart_item['line_subtotal'], $coupon_amount);\n\t\t\t\t$persons = $booking['_qty'];\n\t\t\t\tif ($persons <= 4) {\n\t\t\t\t\t$discounted_subtotal += $original_amount;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$persons_no_discount = $persons;\n\t\t\t\t$persons_byoe = 0;\n\t\t\t\t$persons_promo = 0;\n\t\t\t\t$discounts = $cart_item['discount'];\n\t\t\t\tif ($discounts) {\n\t\t\t\t\tforeach ($discounts as $discount) {\n\t\t\t\t\t\t$discount_qty = $discount['qty'];\n\t\t\t\t\t\tif ($discount['type'] === 'Bring Your Own Equipment') {\n\t\t\t\t\t\t\t$persons_byoe = $discount_qty;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$persons_promo = $discount_qty;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$persons_no_discount -= $discount_qty;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($persons_no_discount >= 4) {\n\t\t\t\t\t$discounted_subtotal += $original_amount;\n\t\t\t\t\tcontinue;\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$byoe_qty = max(0, 4 - $persons_no_discount);\n\t\t\t\t$discounted_subtotal += 35 * $persons_no_discount + 17 * $byoe_qty;\n\t\t\t\t\n\t\t\t\t\/*\n\t\t\t\t\/\/ New\n\t\t\t\t$byoe_price = 18;\n\t\t\t\t$byoe_enable = 0;\n\t\t\t\t\n\t\t\t\t$valid_qty = $booking['_qty'];\n\t\t\t\tforeach ($cart_item['discount'] as $discount) {\n\t\t\t\t\t$valid_qty -= $discount['qty'];\n\t\t\t\t\tif ($discount['type'] === 'Bring Your Own Equipment') {\n\t\t\t\t\t\t$byoe_enable = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\/\/$discount_subtotal += $byoe_enable * $byoe_price * max(0, 4 - $valid_qty);\n\t\t\t\t$discount_subtotal += $coupon_amount * $booking['_qty'] \/ 4 - $byoe_enable * $byoe_price * max(0, 4 - $valid_qty);\n\t\t\t\t\/\/$archery_qty++;\n\t\t\t\t$is_valid = true;*\/\n\t\t\t}\n\t   }\n   }\n\t\/\/$coupon->set_amount($archery_qty * $coupon->get_amount() - $discount_subtotal);\n\n\t$coupon->set_amount($discounted_subtotal);\n\t\n\t\/*$person_count = 0;\n\t$booking_count = 0;\n   foreach ( WC()->cart->get_cart() as $cart_item ) {\n\t   if ($cart_item['product_id'] == 68051) {\n\t\t   $booking_count++;\n\t\t\t$booking = $cart_item['booking'];\n\t\t\t$is_archery = $booking['_resource_id'] === 68059;\n\n\t\t\t\/\/ Coupon valid if booking archery for 2020 black friday weekend, and only apply discount to the archery part\n\t\t\tif ($is_archery && is_bf_weekend($booking['_start_date'])) {\n\t\t\t\t$person_count += $booking['Persons'];\n\t\t\t\t$is_valid = true;\n\t\t\t}\n\t   }\n   }\n\t\n\t$coupon->set_amount($coupon->get_amount() * $person_count \/ $booking_count);*\/\n\t\n   return $is_valid;\n}\n\nadd_filter( 'woocommerce_coupon_error','set_coupon_error_message',10,3 );\nfunction set_coupon_error_message($err, $err_code, $coupon) {\n\t$is_bfa = $coupon->get_code() === 'bfarchery';\n\tif (!$is_bfa) {\n\t\treturn $err;\n\t}\n\tif ($err_code === 100) {\n\t\t$err = esc_html__('This coupon only applys to Archery booked for the day between Nov 27, 2020 and Nov 29, 2020!', 'woocommerce');\n\t}\n    return $err;\n}\n\nfunction remove_tax_for_booking_product_for_bf_event($cart)\n{\n    if (is_admin() && !defined('DOING_AJAX')) {\n        return;\n    }\n\t\n    if (did_action('woocommerce_before_calculate_totals') >= 2) {\n        return;\n    }\n\n    foreach ($cart->get_cart() as $cart_item) {\n\t\t\n\t\t\/\/ Tax free for all resources if booking for 2020 black friday weekend\n\t\tif ($cart_item['product_id'] == SINGULAR_ID && is_bf_weekend($cart_item['booking']['_start_date'])) {\n\t        $cart_item['data']->set_tax_class('zero-rate');\n\t\t}\n    }\n}\nadd_action('woocommerce_before_calculate_totals', 'remove_tax_for_booking_product_for_bf_event');\n\nfunction is_bf_weekend($time) {\n\t$from = strtotime('2020-11-27 00:00');\n\t$to = strtotime('2020-11-30 00:00');\n\treturn $time >= $from && $time < $to;\n}","priority":"10"},{"name":"Exclude Products From Searching","scope":"front-end","code":"function exclude_products_from_searching( $query ) {\n   if (!is_admin() && $query->is_main_query() && $query->is_search()) {\n       $query->set( 'post_type', array( 'product' ) );\n\t   \n\t   \/\/ Make sure to hide products when no valid input\n\t   $s = $query->get('s');\n\t   if ($s === '' || ctype_space($s)) {\n\t\t   $query->set('s', ' ');\n\t   }\n\t   \n       $tax_query = array(\n           array(\n               'taxonomy' => 'product_cat',\n               'field'   => 'slug',\n               'terms'   => ['fishing', 'crankbaits-fishing', 'apparel-accessories', 'casual', 'eyewear', 'fishing-apparel-accessories', 'footwear', 'fishing-footwear', 'hunting-hiking', 'socks-insoles-laces', 'tactical-footwear', 'winter', 'work-boots', 'gloves', 'hats-scarves-accessories', 'hunting-gear', 'jesse-james', 'tactical', 'under-armour', 'archery', 'accessories-archery', 'bolts-arrows', 'cases', 'compound-bows', 'crossbows', 'longbows', 'recurve-longbows', 'camping', 'accessories-camping', 'lamps-lights-matches', 'survival-navigation', 'tents-sleeping-bags', 'tools-camping', 'electronics', 'floats', 'hunting', 'accessories-hunting', 'blinds-camouflage', 'field-dressing-tools', 'game-calls-decoys', 'scents', 'ice-fishing', 'knives-axes-flashlights-tools', 'fishing-knives', 'fixed-blade-knives', 'flashlights', 'folding-knives', 'hatchets-throwing-knives-axes', 'hunting-knives', 'multi-tools', 'premium-knives', 'saws', 'sharpeners', 'tactical-tools', 'lures', 'bait-eggs', 'beads', 'crankbaits', 'dodgers-flashers', 'flys-poppers', 'in-line-spinners', 'jigs', 'plastics', 'spinnerbaits', 'spoons', 'top-water', 'trolling-lures', 'nets', 'online-exclusive', 'storage-transportation', 'ammunition-storage', 'backpacks-storage-transportation', 'cabinets-safes', 'safe-accessories', 'hard-cases', 'range-bags', 'shell-holders-storage-transportation', 'socks', 'soft-cases', 'trigger-case-locks'\n, 'shooting', 'sales', 'firearms', 'handguns-firearms', 'restricted-rifles-firearms', 'non-restricted', 'shotguns-firearms', 'ammunition-2', 'bulk-ammo', 'handgun-ammo', 'rifle-ammo', 'shotgun-ammo', 'centerfire', 'dummy-rounds', 'rimfire', 'shotgun-ammunition-2', 'consignments', 'restricted-rifles', 'airguns-consignments', 'handguns-consignments', 'non-restricted-rifles', 'optics', 'others', 'prohibited', 'shotguns-consignments', 'archery-airguns-airsoft-slingshots', 'airguns', 'accessories-ammunition', 'non-restricted-license-needed', 'handguns', 'rifles', 'under-500-fps', 'handguns-under-500-fps', 'rifles-under-500-fps', 'airsoft', 'accessories-airsoft', 'ammunition', 'rifles-airsoft', 'shotguns', 'slingshots', 'accessories-slingshots', 'transport-cases', 'beads-2', 'firearms-and-hunting-courses', 'march-break-camp', 'non-restricted-cfsc-and-hunting-course', 'hunting-courses', 'non-restricted-cfsc-and-retricted-crfsc', 'gears-kits', 'eyes-ears', 'holsters', 'magazines', 'tools-accessories-shooting-firearm-accessories', 'gifts', 'handgun', 'barrels-conversion-kits', 'conversion-kits', 'grips-base-pads', 'mag-pouches', 'parts', 'triggers', 'handguns-airsoft', 'ministry-of-natural-resources-mnr-tags', 'shooting-firearm-accessories', 'belts', 'bipods-shooting-rests', 'cleaning-oils-solvents', 'firearms-maintenance', 'cleaning-accessories', 'cleaning-brushes-patches', 'cleaning-kits', 'cleaning-oils-solvents-firearms-maintenance', 'magazines-clips', 'rifle', 'ar-parts', 'barrels', 'conversion-kits-rifle', 'grips-base-pads-rifle', 'mag-pouches-rifle', 'parts-rifle', 'stocks-rifle', 'tools', 'triggers-rifle', 'shotgun', 'backpacks', 'barrels-chokes', 'grips-base-pads-shotgun', 'mag-tube-springs', 'parts-shotgun', 'shell-holders', 'stocks', 'tools-accessories', 'triggers-shotgun', 'slings-swivels', 'targets', 'reloading', 'accessories', 'brass', 'new', 'once-fired', 'bullets-projectiles', 'dies', 'powders', 'presses-equipment', 'primers', 'wads', 'pre-orders', 'rods-reels-combos-line', 'combos', 'line', 'reels', 'rods', 'optics-plus', 'binoculars-spotting-scopes', 'handgun-sights', 'iron-sights', 'mounts-rails', 'lazer-sights', 'night-vision', 'range-finders', 'red-dots', 'rings', 'scopes', 'tools-accessories-optics-plus', 'tackle-organizers-transport', 'terminal-tackle', 'tools-accessories-2', 'uncategorized', 'vip-membership'],\n               'operator' => 'NOT IN',\n           ),\n       );\n       $query->set( 'tax_query', $tax_query );\n\t}\n}\nadd_action( 'pre_get_posts', 'exclude_products_from_searching' );","priority":"10"},{"name":"Redirect to booking page","scope":"front-end","code":"function redirect_to_booking_page() {\n    $url = 'solelyana.com\/product\/bookings';\n    return esc_url( $url );\n}\nadd_filter( 'woocommerce_return_to_shop_redirect', 'redirect_to_booking_page' );","priority":"10"},{"name":"Restore passes after cancelling booking","scope":"global","code":"add_action('woocommerce_booking_cancelled', 'restore_promo_once_booking_cancelled');\nfunction restore_promo_once_booking_cancelled($booking_id) {\n\t$booking = new WC_Booking($booking_id);\n\t$order = $booking->get_order();\n\t\n\t$order_item_id = $booking->get_order_item_id();\n\t$order_item = $order->get_item($order_item_id);\n\t$user = $order->get_user_id();\n\t$resource = key($booking->get_person_counts());\n\t\n\t$discount_info = $order_item->get_meta('discount');\n\tif (!$discount_info) {\n\t\treturn;\n\t}\n\t\t\n\tforeach ($discount_info as $discount) {\n\t\tif (strpos($discount['type'], 'Use Promo') !== false) {\n\t\t\tglobal $wpdb;\n\n\t\t\t$qty = $discount['qty'];\n\n\t\t\tswitch ($resource) {\n\t\t\t\tcase ARCHERY_ID:\n\t\t\t\t\t$type = 'Promo Passes 10+1 - Archery';\n\t\t\t\t\tbreak;\n\t\t\t\tcase AIRSOFT_ID:\n\t\t\t\t\t$type = 'Promo Passes 10+1 - Airsoft';\n\t\t\t\t\tbreak;\n\t\t\t\tcase COMBO_ID:\n\t\t\t\t\t$type = 'Promo Passes 10+1 - Combo';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\techo 'Wrong resource id';\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\n\t\t\t$res = $wpdb->query(\n\t\t\t\t$wpdb->prepare(\"\n\t\t\t\t\tUPDATE {$wpdb->prefix}usermeta\n\t\t\t\t\tSET meta_value = meta_value + %d\n\t\t\t\t\tWHERE meta_key = %s AND user_id = %d\n\t\t\t\t\t\",\n\t\t\t\t\t[$qty, $type, $user]\n\t\t\t\t)\n\t\t\t);\n\t\t\t$res or $wpdb->print_error('Failed to update data into the database!');\n\t\t\t\t\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tif (strpos($discount['type'], 'Use VIP') !== false) {\n\t\t\tglobal $wpdb;\n\n\t\t\t$qty = $discount['qty'];\n\t\t\t$type = 'VIP';\n\t\n\t\t\t$res = $wpdb->query(\n\t\t\t\t$wpdb->prepare(\"\n\t\t\t\t\tUPDATE {$wpdb->prefix}usermeta\n\t\t\t\t\tSET meta_value = meta_value + %d\n\t\t\t\t\tWHERE meta_value + %d <= 2 AND meta_key = %s AND user_id = %d\n\t\t\t\t\t\",\n\t\t\t\t\t[$qty, $qty, $type, $user]\n\t\t\t\t)\n\t\t\t);\n\t\t\t$res or $wpdb->print_error('Failed to update data into the database!');\n\t\t\t\t\n\t\t\treturn;\n\t\t}\n\t}\n}","priority":"10"},{"name":"Add fields to registration form","scope":"front-end","code":"function create_fields_for_registration_form() {\n    return apply_filters('woocommerce_forms_field', [\n        'first_name' => [\n            'type'        => 'text',\n            'label'       => __( 'First Name', 'woocommerce' ),\n            'required'    => true,\n        ],\n        'last_name' => [\n            'type'        => 'text',\n            'label'       => __( 'Last Name', 'woocommerce' ),\n            'required'    => true,\n        ],\n        'phone' => [\n            'type'        => 'tel',\n            'label'       => __( 'Phone', 'woocommerce' ),\n            'required'    => true,\n        ],\n    ]);\n}\nfunction add_fields_to_registration_form() {\n    $fields = create_fields_for_registration_form();\n    foreach ( $fields as $key => $field ) {\n        woocommerce_form_field( $key, $field );\n    }\n}\nadd_action('woocommerce_register_form', 'add_fields_to_registration_form');\n\nfunction save_new_customer_from_my_account_registration( $customer_id ) {\n    if ( isset( $_POST['phone'] ) ) {\n\t\tupdate_user_meta( $customer_id, 'billing_phone', sanitize_text_field( $_POST['phone'] ) );\n\t}\n\tif ( isset( $_POST['first_name'] ) ) {\n\t\tupdate_user_meta( $customer_id, 'first_name', sanitize_text_field( $_POST['first_name'] ) );\n    \tupdate_user_meta( $customer_id, 'billing_first_name', sanitize_text_field( $_POST['first_name'] ) );\n   \t}\n\tif ( isset( $_POST['last_name'] ) ) {\n        update_user_meta( $customer_id, 'last_name', sanitize_text_field( $_POST['last_name'] ) );\n        update_user_meta( $customer_id, 'billing_last_name', sanitize_text_field( $_POST['last_name'] ) );\n    }\n}\nadd_action( 'woocommerce_created_customer', 'save_new_customer_from_my_account_registration' );","priority":"10"}]}